Must be called from the root of the project
Creating envs in kubernetes/dev/envs
Previewing kustomization
apiVersion: v1
data:
  BACKEND_CACHE_HOSTNAME: memcached
  BACKEND_CACHE_PORT: "11211"
  BACKEND_DJANGO_ALLOWED_HOSTS: '"0.0.0.0"'
  BACKEND_DJANGO_CORS_WHITELIST: '"http://localhost:3000"'
  BACKEND_DJANGO_DEUBG: "True"
  BACKEND_DJANGO_SECRET_KEY: django_secret_key
  BACKEND_POSTGRES_DB: postgres
  BACKEND_POSTGRES_HOSTNAME: db
  BACKEND_POSTGRES_PASSWORD: postgres
  BACKEND_POSTGRES_PORT: "5432"
  BACKEND_POSTGRES_USER: postgres
  BACKEND_TWELVE_DATA_API_KEY: '"6cc71c5c23a8491ab6e87389c3cc9f8a"'
  GLOBAL_RUN_ENV: dev
kind: ConfigMap
metadata:
  name: backend-env-4mgd4tt28c
  namespace: dev-peridash
---
apiVersion: v1
data:
  GLOBAL_RUN_ENV: dev
  POSTGRES_DB: postgres
  POSTGRES_HOSTNAME: db
  POSTGRES_PASSWORD: postgres
  POSTGRES_PORT: "5432"
  POSTGRES_USER: postgres
kind: ConfigMap
metadata:
  name: db-env-c887448bt7
  namespace: dev-peridash
---
apiVersion: v1
data:
  GLOBAL_RUN_ENV: dev
  NEXT_PRIVATE_BACKEND_URL: '"http://backend:8000"'
  NEXT_PUBLIC_BACKEND_URL: '"http://localhost:8000"'
kind: ConfigMap
metadata:
  name: frontend-env-62h4g92dch
  namespace: dev-peridash
---
apiVersion: v1
data:
  GLOBAL_RUN_ENV: dev
  NGINX_BACKEND_PROXY_PASS_HOSTNAME: backend.dev-peridash:8000
  NGINX_FRONTEND_PROXY_PASS_HOSTNAME: frontend.dev-peridash:3000
  NGINX_SERVER_NAME_BACKEND: api.dev.peridash.com
  NGINX_SERVER_NAME_FRONTEND: dev.peridash.com
kind: ConfigMap
metadata:
  name: nginx-env-t7f6bm4ghb
  namespace: dev-peridash
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: dev-peridash
spec:
  ports:
  - port: 8000
    protocol: TCP
    targetPort: 8000
  selector:
    app: backend
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: dev-peridash
spec:
  ports:
  - port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: db
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: dev-peridash
spec:
  ports:
  - port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app: frontend
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: memcached
  namespace: dev-peridash
spec:
  ports:
  - name: memcached
    port: 11211
    protocol: TCP
    targetPort: 11211
  selector:
    app: memcached
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: dev-peridash
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  - name: https
    port: 443
    protocol: TCP
    targetPort: 443
  selector:
    app: nginx
  type: LoadBalancer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data
  namespace: dev-peridash
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: linode-block-storage-retain
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: dev-peridash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: backend-env-4mgd4tt28c
        image: uintuser/dev-peridash-nginx:dev
        imagePullPolicy: Always
        name: backend
        ports:
        - containerPort: 8000
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 100Mi
      imagePullSecrets:
      - name: regcred
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  namespace: dev-peridash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: db-env-c887448bt7
        image: postgres:15.2
        name: db
        ports:
        - containerPort: 5432
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - mountPath: /var/lib/postgresql
          name: postgres-data
      imagePullSecrets:
      - name: regcred
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: dev-peridash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: frontend-env-62h4g92dch
        image: uintuser/dev-peridash-frontend:latest
        imagePullPolicy: Always
        name: frontend
        ports:
        - containerPort: 3000
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 100Mi
      imagePullSecrets:
      - name: regcred
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: memcached
  namespace: dev-peridash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: memcached
  template:
    metadata:
      labels:
        app: memcached
    spec:
      containers:
      - command:
        - memcached
        image: memcached:latest
        name: memcached
        ports:
        - containerPort: 11211
          name: memcached
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 250Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: dev-peridash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: nginx-env-t7f6bm4ghb
        image: uintuser/dev-peridash-nginx:dev
        imagePullPolicy: Always
        name: nginx
        ports:
        - containerPort: 80
        - containerPort: 443
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 100Mi
      imagePullSecrets:
      - name: regcred
